// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColDecimal512 represents Decimal512 column.
type ColDecimal512 []Decimal512

// Compile-time assertions for ColDecimal512.
var (
	_ ColInput  = ColDecimal512{}
	_ ColResult = (*ColDecimal512)(nil)
	_ Column    = (*ColDecimal512)(nil)
)

// Rows returns count of rows in column.
func (c ColDecimal512) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColDecimal512) Reset() {
	*c = (*c)[:0]
}

// Type returns ColumnType of Decimal512.
func (ColDecimal512) Type() ColumnType {
	return ColumnTypeDecimal512
}

// Row returns i-th row of column.
func (c ColDecimal512) Row(i int) Decimal512 {
	return c[i]
}

// Append Decimal512 to column.
func (c *ColDecimal512) Append(v Decimal512) {
	*c = append(*c, v)
}

// Append Decimal512 slice to column.
func (c *ColDecimal512) AppendArr(vs []Decimal512) {
	*c = append(*c, vs...)
}

// LowCardinality returns LowCardinality for Decimal512.
func (c *ColDecimal512) LowCardinality() *ColLowCardinality[Decimal512] {
	return &ColLowCardinality[Decimal512]{
		index: c,
	}
}

// Array is helper that creates Array of Decimal512.
func (c *ColDecimal512) Array() *ColArr[Decimal512] {
	return &ColArr[Decimal512]{
		Data: c,
	}
}

// Nullable is helper that creates Nullable(Decimal512).
func (c *ColDecimal512) Nullable() *ColNullable[Decimal512] {
	return &ColNullable[Decimal512]{
		Values: c,
	}
}

// NewArrDecimal512 returns new Array(Decimal512).
func NewArrDecimal512() *ColArr[Decimal512] {
	return &ColArr[Decimal512]{
		Data: new(ColDecimal512),
	}
}
